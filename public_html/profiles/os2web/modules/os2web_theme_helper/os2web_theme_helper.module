<?php

/**
 * Retrieve the top term tid for node class array.
 */
function os2web_theme_helper_get_the_classes($nid) {
  $top_parent_term = '';
  $node = node_load($nid);
  if ($portalkategori = field_get_items('node', $node, 'field_os2web_base_field_struct')) {

    // This will be your top parent term if any was found.
    $parent_terms = taxonomy_get_parents_all($portalkategori[0]['tid']);

    foreach ($parent_terms as $parent) {
      $parent_parents = taxonomy_get_parents_all($parent->tid);
      if ($parent_parents != FALSE) {
        // This is top parent term.
        $top_parent_term = $parent->tid;
      }
    }
  }
  return $top_parent_term;
}

/**
 * Helper function to get a rendeable array of spotboxes.
 *
 * @param array $spotboxes
 *   Array of spotboxe nodes with nids.
 *
 * @return array
 *   The renderable array.
 */
function os2web_theme_helper_get_spotboxes($spotboxes, $classes = 'col-xs-6 col-sm-6 col-md-4 col-lg-4') {
  $spotbox_nids = array();
  foreach ($spotboxes as $spotbox) {
    $spotbox_nids[$spotbox['nid']] = $spotbox['nid'];
  }
  $spotbox_array = os2web_spotbox_render_spotboxes($spotbox_nids, NULL, NULL, NULL, 'fredericia_spotbox');

  foreach ($spotbox_array['node'] as &$spotbox) {
    if (is_array($spotbox)) {
      $spotbox['#prefix'] = '<div class="' . $classes . '">';
      $spotbox['#suffix'] = '</div>';
    }
  }
  return $spotbox_array;
}


/**
 * Helper function to retrieve the correct array to display selfservicelinks.
 *
 * @param array $links
 *   Associated array of links with indexes 'nid'.
 *   object $node
 *   The node object.
 *
 * @return array
 *   Array of links with URL and Title.
 */
function os2web_theme_helper_get_selfservicelinks($links = array(), $node = NULL, $term = NULL) {
  $selfservicelinks = array();

  if (($node && $links = field_get_items('node', $node, 'field_os2web_base_field_selfserv')) ||
      ($term && $links = field_get_items('taxonomy_term', $term, 'field_os2web_base_field_selfserv'))) {

    foreach ($links as $link) {
      $selfservicelink = node_load($link['nid']);
      if ($selfservicelink) {
        $link_fields = field_get_items('node', $selfservicelink, 'field_spot_link');
        if (!empty($link_fields)) {
          $link_field = array_shift($link_fields);
          $selfservicelinks[$link['nid']] = array(
            'url' => $link_field['url'],
            'title' => $link_field['title'],
          );
        }
      }
    }
  }
  // Borger.dk artiles selfservice links.
  if (isset($node) && $node->type == 'os2web_borger_dk_article') {
    if ($borger_dk_links = field_get_items('node', $node, 'field_os2web_borger_dk_selfservi')) {
      $doc = new DOMDocument('1.0', 'UTF-8');
      $doc->strictErrorChecking = FALSE;
      $doc->loadHTML('<?xml encoding="UTF-8">' . $borger_dk_links[0]['value']);
      $xml = simplexml_import_dom($doc);
      $count = 0;
      if (is_null($xml->body->ul->li)) {
        $xml_li = $xml->body->div->ul->li;
      }
      else {
        $xml_li = $xml->body->ul->li;
      }
      if (!is_null($xml_li)) {
        foreach ($xml_li as $li) {
          $url = (string) $li->a->attributes()->href;
          $title = (string) $li->a;
          $selfservicelinks[$node->nid . '_' . $count] = array(
            'url' => $url,
            'title' => $title,
          );
          $count++;
        }
      }
    }
  }

  return $selfservicelinks;
}

/**
 * Helper function to return wether a term is a top term.
 *
 * @param int $term_tid
 *   The term tid.
 *
 * @return bool
 *   If this term is top.
 */
function os2web_theme_helper_check_term_is_top($term_tid) {
  $parent = &drupal_static(__FUNCTION__ . $term_tid);
  if (empty($parent)) {
    $parent = db_query("SELECT parent FROM {taxonomy_term_hierarchy} WHERE tid = :tid", array(':tid' => $term_tid))->fetchField();
  }

  return $parent == 0;
}

/**
 * Retrieve large carousel.
 */
function os2web_theme_helper_get_large_carousel($viewname = '', $display = 'front', $frontpage = TRUE, $style = 'fredericia_content_image') {
  if ($viewname == '') {
    return '';
  }
  $large_carousel = '';
  // Branding news view.
  $view = views_get_view($viewname);
  if (!isset($view)) {
    return '';
  }
  $view->set_arguments(array('branding'));
  if (!$frontpage) {
    $filter = $view->get_item('front', 'filter', 'promote');
    $filter['value'] = 1;
    $view->set_item('front', 'filter', 'promote', $filter);
  }
  else {
    $view->set_display('front');
  }
  $view->set_items_per_page(3);
  $view->pre_execute();
  $view->execute();

  $results = $view->result;

  $large_carousel .= '<ol class="carousel-indicators col-md-12 col-sm-12 col-xs-12">';
  foreach ($results as $key => $item) {
    $large_carousel .= '<li data-target="';
    if ($frontpage) {
      $large_carousel .= '#front-news-branding" data-slide-to="' . $key . '"';
    }
    else {
      $large_carousel .= '#nyheder-carousel-large" data-slide-to="' . $key . '"';
    }
    if ($key == 0) {
      $large_carousel .= 'class="active"></li>';
    }
    else {
      $large_carousel .= '></li>';
    }
  }
  $large_carousel .= '</ol>';
  $large_carousel .= '<div class="carousel-inner" id="front-carousel-large" >';

  foreach ($results as $key => $item) {
    if ($key == 0) {
      $large_carousel .= '<div class="item active">';
    }
    else {
      $large_carousel .= '<div class="item">';
    }
    $node = node_load($item->nid);
    $img = field_get_items('node', $node, 'field_os2web_base_field_lead_img');
    $image = $img[0];
    image_get_info($image["filename"]);

    $public_filename = image_style_url($style, $image["uri"]);
    $path = drupal_get_path_alias('node/' . $node->nid);
    $large_carousel .= '<a href="' . $path . '" title="' . $node->title . '">';
    if (drupal_is_front_page()) {
      $classes = 'col-md-7 col-sm-8 col-xs-12';
    }
    else {
      $classes = 'col-md-8 col-sm-12 col-xs-12';
    }
    $large_carousel .= '<div class="row-no-padding ' . $classes;
    if (drupal_is_front_page()) {
      $large_carousel .= ' front-branding-img';
    }
    $large_carousel .= '">';
    $large_carousel .= '<img title = "' . $image["title"] . '" src="' . $public_filename . '"/>';
    $large_carousel .= '</div>';
    if (drupal_is_front_page()) {
      $classes = 'col-md-5 col-sm-4 col-xs-12';
    }
    else {
      $classes = 'col-md-4 col-sm-12 col-xs-12';
    }
    $large_carousel .= '<div class="carousel-title ' . $classes . '">';

    $large_carousel .= '<div class="title col-md-12">';
    $large_carousel .= $node->title;
    $large_carousel .= '</div>';

    $large_carousel .= '<div class="col-md-12">';
    $large_carousel .= '<a href="' . $path . '" title="' . $node->title . '" class="btn btn-primary">L&aelig;s mere</a>';
    $large_carousel .= '</div></div>';
    $large_carousel .= '</a>';
    $large_carousel .= '</div>';
  }
  $large_carousel .= '</div>';
  return $large_carousel;
}
/**
 * Retrieve small carousel.
 */
function os2web_theme_helper_get_front_small_carousel($viewname = '', $display = 'block_3', $arg = array('all'), $pageitems = 9, $style = 'fredericia_content_image') {
  if ($viewname == '') {
    return '';
  }
  $front_small_carousel = '';
  $view = views_get_view($viewname);
  if (!isset($view)) {
    return '';
  }
  $view->set_arguments($arg);
  $view->set_display($display);
  $view->set_items_per_page($pageitems);
  $view->pre_execute();
  $view->execute();

  $results = $view->result;

  $front_small_carousel .= '<div id="front-carousel-small" class="carousel slide" data-ride="carousel">
                           <ol class="carousel-indicators col-md-12 col-sm-12 col-xs-12">';
  if (count($results) > 0) {
    $front_small_carousel .= '<li data-target="#front-carousel-small" data-slide-to="0" class="active"></li>';
  }
  if (count($results) > 3) {
    $front_small_carousel .= '<li data-target="#front-carousel-small" data-slide-to="1"></li>';
  }
  if (count($results) > 6) {
    $front_small_carousel .= '<li data-target="#front-carousel-small" data-slide-to="2"></li>';
  }

  $front_small_carousel .= '</ol>';

  $front_small_carousel .= '<div class="carousel-inner">';

  $small_news_carousel = array();
  foreach ($results as $key => $item) {
    if ($key < 3) {
      $small_news_carousel[0][] = $item;
    }
    elseif ($key >= 3 && $key <= 5) {
      $small_news_carousel[1][] = $item;
    }
    elseif ($key >= 6) {
      $small_news_carousel[2][] = $item;
    }
  }
  foreach ($small_news_carousel as $key => $items) {
    if ($key == 0) {
      $front_small_carousel .= '<div class="item active">';
    }
    else {
      $front_small_carousel .= '<div class="item">';
    }
    foreach ($items as $i => $item) {
      $node = node_load($item->nid);
      $img = field_get_items('node', $node, 'field_os2web_base_field_lead_img');
      $image = $img[0];
      image_get_info($image["filename"]);

      $public_filename = image_style_url($style, $image["uri"]);

      $path = drupal_get_path_alias('node/' . $node->nid);
      $front_small_carousel .= '<a href="' . $path . '">';
      $front_small_carousel .= '<div class="col-md-4 col-sm-4 col-xs-12">';
      $front_small_carousel .= '<div class="front-s-news-item front-s-news-item-' . $i . '">';

      $front_small_carousel .= '<div class="front-s-news-item-img">';
      $front_small_carousel .= '<img title = "' . $image["title"] . '" src="' . $public_filename . '"/>';
      $front_small_carousel .= '</div>';

      $front_small_carousel .= '<div class="front-s-news-item-text">';
      $front_small_carousel .= '<div class="bubble"><span>' . $node->title . '</span></div>';
      $front_small_carousel .= '</div>';

      $front_small_carousel .= '</div>';
      $front_small_carousel .= '</div>';
      $front_small_carousel .= '</a>';
    }
    $front_small_carousel .= '</div>';
  }

  $front_small_carousel .= '</div></div>';

  $front_small_carousel .= '<div class="front-seperator"></div>';
  return $front_small_carousel;
}

/**
 * Retrieve the news term filter and quicktabs.
 */
function os2web_theme_helper_get_term_news_filer_and_quicktabs($block) {
  $news_term_right_sidebar = '';
  // Filter.
  $block = block_load('views', 'news_filter-block');
  $output = _block_get_renderable_array(_block_render_blocks(array($block)));
  $news_term_right_sidebar .= drupal_render($output);

  // Menu block.
  $block = block_load('menu_block', '4');
  $output = _block_get_renderable_array(_block_render_blocks(array($block)));
  $news_term_right_sidebar .= drupal_render($output);

  $news_term_right_sidebar .= '<div class="nyheder-seperator"></div>';

  // Quick tabs.
  $news_term_right_sidebar .= ' <div id="fredericia_tabs">';
  $block_tab = block_load('quicktabs', 'nyhed_quicktabs');
  $output = _block_get_renderable_array(_block_render_blocks(array($block_tab)));
  $news_term_right_sidebar .= drupal_render($output);
  $news_term_right_sidebar .= '</div>';

  $news_term_right_sidebar .= '<div class="nyheder-seperator"></div>';

  return $news_term_right_sidebar;

}
/**
 * Retrieve news term content view.
 */
function os2web_theme_helper_get_view_content($viewname = '', $display = 'block', $arg = array(), $pageitems = NULL) {
  $content = '';
  $view = views_get_view($viewname);
  if (!isset($view)) {
    return '';
  }
  $view->set_display($display);
  $view->set_arguments($arg);
  if (isset($pageitems)) {
    $view->set_items_per_page($pageitems);
  }
  $view->pre_execute();
  $view->execute();
  $content .= $view->render();
  return $content;
}
/**
 * Helper: retrieve os2web_borger_dk_article content.
 */
function os2web_theme_helper_get_borger_dk_content($node) {
  $content_field = array();
  if ($node->type == 'os2web_borger_dk_article') {
    $fields = $node->os2web_borger_dk_article['field_settings'];
    // First get admin display settings.
    $admin_display_fields = variable_get('os2web_borger_dk_display');
    $locked_os2web_types = array('field_os2web_borger_dk_borgerurl' => 1);
    // We get admin microarticle display settings.
    $microarticle = variable_get('os2web_borger_dk_microarticle_active', FALSE);
    if ($microarticle) {
      $field_microarticle_settings = $node->os2web_borger_dk_microarticle['field_microarticle_settings'];
    }

    foreach ($admin_display_fields as $type => $value) {
      if ($type == 'title' || $type == 'field_os2web_base_field_selfserv') {
        continue;
      }
      $item = field_get_items('node', $node, $type);
      // If ADMIN set this field to display.
      if ($admin_display_fields[$type]) {
        $arr = $item[0];

        if ($item && $type != 'title' && $type != 'field_os2web_borger_dk_image') {
          $content_field[$type] = $item['0']['value'];
        }
        elseif ($item && $type == 'field_os2web_borger_dk_image') {
          $filepath = $item['0']['uri'];
          $alt = $item['0']['alt'];
          $content_field[$type] = theme('image', array(
                                                       'path' => $filepath,
                                                       'alt' => $alt,
                                                       'title' => $alt));
        }
        else {
          $content_field[$type] = '';
        }
        // Microarticles : if microarticle is set up to show by admin.
        if ($microarticle && $type == 'body') {
          // Check if content field is body and field_microarticle_settings
          // is NOT empty.
          // The field_microarticle_setting will be empty when a new
          // article is imported and shown in a form, then node_view
          // will display full body text.
          if (!empty($field_microarticle_settings)) {
            $body_text = $item['0']['value'];

            $article_text = '';

            $doc = new DOMDocument();
            $doc->loadHTML('<?xml encoding="utf-8" ?>' . $body_text);
            $xpath = new DOMXPath($doc);

            $results = $xpath->query("//*[@class='microArticle']");

            $microno = 0;
            foreach ($results as $item) {
              foreach ($item->getElementsByTagName('h2') as $articletitle) {
                $title = trim($articletitle->nodeValue);
              }

              $text = '';
              foreach ($item->getElementsByTagName('div')->item(0)->childNodes as $articletext) {
                $text .= $doc->saveHTML($articletext);
              }
              $microno++;

              if ($field_microarticle_settings[$microno] != 0) {
                // Body text (Article text).
                $article_text .= "<div class=\"microArticle\" id=\"microArticle" . $micro_id . "\">" . "\r\n";

                $micro_h2 = "<h2 class=\"mArticle\" id=\"mArticle" . $microno . "\">";
                $micro_h2 .= $title . "</h2>";

                $micro_content = "<div class=\"mArticle" . $microno . " mArticle\">";
                $micro_content .= $text . "\r\n    </div>";

                $article_text .= $micro_h2 . "\r\n";
                $article_text .= $micro_content;
                $article_text .= "\r\n</div>\r\n\r\n";
              }
            }
            $article_text = str_replace("</h2>", "</h2><a href='#' class='gplus'>+</a>", $article_text);
            // Content body shows only visible microarticles/ part of body_text.
            $content_field['body'] = $article_text;
          }
          else {

            $show_div = $item['0']['value'];
            $show_div = str_replace("</h2>", "</h2><a href='#' class='gplus'>+</a>", $show_div);
            $content_field['body'] = $show_div;
          }
        }
        elseif (!$microarticle && $type == 'body') {
          $show_div = $item['0']['value'];
          $show_div = str_replace("</h2>", "</h2><a href='#' class='gplus'>+</a>", $show_div);
          $content_field['body'] = $show_div;
        }

        // End of microarticles.
        // If EDITOR set this field to be hidden.
        if ($fields[$type] == '0') {
          $content_field[$type] = '';
        }
      }

      // If ADMIN set this field to be hidden.
      else {
        $content_field[$type] = '';
      }
    }
  }

  return $content_field;
}

/**
 * Helper: retrieve os2web_borger_dk_article legislation in sidebar_second.
 */
function os2web_theme_helper_get_borger_dk_links($item) {
  $legislation_links = array();
  $doc = new DOMDocument('1.0', 'UTF-8');
  $doc->strictErrorChecking = FALSE;
  $doc->loadHTML('<?xml encoding="UTF-8">' . $item[0]['value']);
  $xml = simplexml_import_dom($doc);
  $count = 0;
  if ($xml->xpath('//ul')) {
    $xml_li = $xml->body->div->div->ul->li;
  }
  else {
    if ($xml->xpath('/ul')) {
      $xml_li = $xml->body->div->ul->li;
    }
  }
  if (isset($xml_li)) {
    foreach ($xml_li as $li) {
      $url = (string) $li->a->attributes()->href;
      $title = (string) $li->a;
      $legislation_links[] = array(
        'url' => $url,
        'title' => $title,
      );
      $count++;
    }
  }
  return $legislation_links;
}
/**
 * Helper. Returns almost the same as render(node_view()) for a webform.
 *
 * Instead of a fully loaded render array, though, it returns markup, without
 * too many wrappers and such.
 */
function os2web_theme_helper_get_webform($nid) {
  $webform_node = node_load($nid);

  $submission = (object) array();
  $enabled = TRUE;
  $preview = FALSE;
  $webform_id = 'webform_client_form_' . $nid;

  $form = drupal_get_form($webform_id, $webform_node, $submission, $enabled, $preview);

  $text = '<h3>' . $webform_node->title . '</h3>';

  if ($body = field_get_items('node', $webform_node, 'body')) {
    $text .= $body[0]['safe_value'];
  }

  return $text . drupal_render($form);
}


/**
 * Helper. Returns true or false.
 *
 * @param object $node
 *   reviewed node object.
 *   object $link.
 *   related link object.
 *   string $type
 *   node or term.
 */
function os2web_theme_helper_check_parent_menu_link($node, $link, $type) {
  switch ($type) {
    case 'node':
      $path = 'node/' . $node->nid;
      break;

    case 'taxonomy_term':
      $path = 'taxonomy/term/' . $node->tid;
  }
  $node_plid = os2web_theme_helper_get_parent_menu_link($path);
  $link_plid = os2web_theme_helper_get_parent_menu_link('node/' . $link->nid);

  if ($node_plid == $link_plid && $node_plid != 0) {
    return TRUE;
  }

  return FALSE;
}


/**
 * Helper. Get menu links parent plid.
 */
function os2web_theme_helper_get_parent_menu_link($path) {

  $plid = db_query("SELECT plid FROM {menu_links} WHERE link_path = :link_path", array(':link_path' => $path))->fetchField();
  return $plid;
}

function os2web_theme_helper_output_spotbox($variables, $node, $term, $term_is_top) {
  $output = FALSE;
  if (($node && $spotboxes = field_get_items('node', $node, 'field_os2web_base_field_spotbox')) ||
      ($term && !$term_is_top && $spotboxes = field_get_items('taxonomy_term', $term, 'field_os2web_base_field_spotbox'))) {

    if (empty($variables['page']['sidebar_second'])) {
      $spotbox_render = drupal_render(os2web_theme_helper_get_spotboxes($spotboxes));
    }
    else {
      $spotbox_render = drupal_render(os2web_theme_helper_get_spotboxes($spotboxes, 'col-xs-6 col-sm-6 col-md-6 col-lg-6'));
    }

    $output = array(
      'os2web_spotbox' => array(
        '#markup' => $spotbox_render,
      ),
      '#theme_wrappers' => array('container'),
      '#attributes' => array(
        'class' => array('row', 'spotboxes'),
      ),
    );
  }
  return $output;
}

function os2web_theme_helper_output_related_links($content, $type = 'node') {

  // Get all related links to this node.
  $related_links = FALSE;
  if (!$content) {
    return $related_links;
  }
  switch ($type) {

    case 'node':
      // 1. Get all unique related links from the node.
      $base_field_links = field_get_items('node', $content, 'field_os2web_base_field_related');
      // 2. Get borger.dk recommended links.
      if ($content->type == 'os2web_borger_dk_article' && $item = field_get_items('node', $content, 'field_os2web_borger_dk_recommend')) {
        $borger_dk_related_links = os2web_theme_helper_get_borger_dk_links($item);
      }
      // 3. Get all related links related to the KLE number on the node.
      if ((!isset($content->field_os2web_base_field_hidlinks['und'][0]['value']) ||
        $content->field_os2web_base_field_hidlinks['und'][0]['value'] == '0')) {
        $kle_items = field_get_items('node', $content, 'field_os2web_base_field_kle_ref');
      }
      // 4. External related links.
      $ext_links = field_get_items('node', $content, 'field_os2web_base_field_ext_link');
      break;

    case 'taxonomy_term':
      // 1. Get all unique related links from the node.
      $base_field_links = field_get_items('taxonomy_term', $content, 'field_os2web_base_field_related');
      // 3. Get all related links related to the KLE number on the node.
      if ((!isset($content->field_os2web_base_field_hidlinks['und'][0]['value']) ||
        $content->field_os2web_base_field_hidlinks['und'][0]['value'] == '0')) {
        $kle_items = field_get_items('taxonomy_term', $content, 'field_os2web_base_field_kle_ref');
      }
      // 4. External related links.
      $ext_links = field_get_items('taxonomy_term', $content, 'field_os2web_base_field_ext_link');
      break;
  }

  // 1. Get all unique related links from the node.
  if ($base_field_links) {
    foreach ($links as $link) {
      $link_node = node_load($link['nid']);
      if ($link_node) {
        $related_links[$link['nid']] = array(
          'nid' => $link['nid'],
          'title' => $link_node->title,
          'class' => 'int-link',
        );
      }
    }
  }

  // 2. Get borger.dk recommended links.
  if (isset($borger_dk_related_links) && $borger_dk_related_links) {
    foreach ($borger_dk_related_links as $key => $link) {
      $related_links[$content->nid . '_' . $key] = array(
        'url' => $link['url'],
        'title' => $link['title'],
        'class' => 'ext-link',
      );
    }
  }
  // 3. Get all related links related to the KLE number on the node. Only get
  // these if the checkbox "Skjul relaterede links" isn't checked.
  // Check also links nodes are not siblings with the reviewed node.
  if ($kle_items) {

    foreach ($kle_items as $kle) {
      // Get all nodes which have the same KLE number as this node.
      $query = new EntityFieldQuery();
      $result = $query->entityCondition('entity_type', 'node')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_os2web_base_field_kle_ref', 'tid', $kle['tid'])
        ->propertyOrderBy('title', 'ASC')
        ->execute();
      if (isset($result['node'])) {
        foreach ($result['node'] as $link) {
          // Be sure to skip links which already is in list, or links to current
          // node.
          if (isset($related_links[$link->nid]) || ($type == 'node' && $content->nid == $link->nid)) {
            continue;
          }
          // Check the link node is not siblings in menu,
          // does not have the same parent menu link.
          if (os2web_theme_helper_check_parent_menu_link($content, $link, $type)) {
            continue;
          }

          $link_node = node_load($link->nid);
          if ($link_node) {
            $related_links[$link->nid] = array(
              'nid' => $link->nid,
              'title' => $link_node->title,
              'class' => 'kle-link',
            );
          }

        }
      }
    }
  }

  // 4. External related links.
  if ($ext_links) {
    foreach ($ext_links as $link) {
      $related_links[] = array(
        'url' => $link['url'],
        'title' => $link['title'],
        'class' => 'ext-link',
      );
    }
  }
  return $related_links;
}